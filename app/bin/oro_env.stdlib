# This is standard library for other Oro shell scripts #

# Configuration #

source app/config/oro_env.conf;

# Variables #

DB_TYPE="$(cat $DB_CONF | grep database_driver | awk {'print $2'})"
DB_HOST="$(cat $DB_CONF | grep database_host | awk {'print $2'})"
DB_PORT="$(cat $DB_CONF | grep database_port | awk {'print $2'})"
DB_NAME="$(cat $DB_CONF | grep database_name | awk {'print $2'})"
DB_USER="$(cat $DB_CONF | grep database_user | awk {'print $2'})"
DB_PSWD="$(cat $DB_CONF | grep database_password | awk {'print $2'})"
LATEST_DUMP="$(ls -t $DB_BACKUP_DIR/*.sql.gz | head -1)"
LATEST_CODE="$(ls -t $CODE_BACKUP_DIR/*.tar.gz | head -1)"

# Function definitions #

maintenance_on () {
	echo "Entering maintenance mode..."
	touch $LOCK_FILE;
	crond_stop;
	cd $WEB_ROOT/$ORO_NAME;
	app/bin/oro_clankd stop;
	graceful_wait;	
	echo "Maintenance is on!"
}

maintenance_off () {
	echo "Entering production operation..."
	crond_start;
	cd $WEB_ROOT/$ORO_NAME;
	app/bin/oro_clankd start;
	rm -f $LOCK_FILE;
        echo "Maintenance is off!"
	exit 0;
}

mysql_backup () {
        echo "Running MySQL_DUMP..."
        mysqldump --single-transaction -h $DB_HOST -P $DB_PORT -u $DB_USER $DB_NAME -p$DB_PSWD | gzip -c > $DB_BACKUP_DIR/$DB_NAME.`date +"%F-%H:%M"`.sql.gz
        echo "OK"
        echo $DB_BACKUP_DIR/$DB_NAME.`date +"%F-%H:%M"`.sql.gz
        echo "Done"
}

pgsql_backup () {
        echo "Running PG_DUMP..."
        echo $DB_HOST:$DB_PORT:$DB_NAME:$DB_USER:$DB_PSWD > ~/.pgpass
        chmod 0600 ~/.pgpass
        pg_dump -w -c -h $DB_HOST -p $DB_PORT -U $DB_USER $DB_NAME | gzip -c > $DB_BACKUP_DIR/$DB_NAME.`date +"%F-%H:%M"`.sql.gz
        rm -f ~/.pgpass
        echo "OK"
        echo $DB_BACKUP_DIR/$DB_NAME.`date +"%F-%H:%M"`.sql.gz
        echo "Done"
}

db_rotate () {
        find $DB_BACKUP_DIR -type f -mtime $DAYS -exec rm -f {} \;
}

code_rotate () {
        find $CODE_BACKUP_DIR -type f -mtime $DAYS -exec rm -f {} \;
}

mysql_restore () {
        echo "Restoring database from MySQL_DUMP..."
        if [ ! -z "$1" ]; then
                gzip -d < $DB_BACKUP_DIR/$DUMP | mysql -h $DB_HOST -P $DB_PORT -u $DB_USER $DB_NAME -p$DB_PSWD;
                echo "Restored from dump file $DB_BACKUP_DIR/$DUMP";
                echo "OK"
        else
                gzip -d < $LATEST_DUMP | mysql -h $DB_HOST -P $DB_PORT -u $DB_USER $DB_NAME -p$DB_PSWD;
                echo "Restored from dump file $LATEST_DUMP";
                echo "OK"
        fi
        echo "Done"
}

pgsql_restore () {
        echo "Restoring database from PG_DUMP..."
        echo $DB_HOST:$DB_PORT:$DB_NAME:$DB_USER:$DB_PSWD > ~/.pgpass
        chmod 0600 ~/.pgpass
        if [ ! -z "$1" ]; then
                gzip -d < $DB_BACKUP_DIR/$DUMP | psql -q -w -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME &>/dev/null;
                echo "Restored from dump file $DB_BACKUP_DIR/$DUMP";
                echo "OK"
        else
                gzip -d < $LATEST_DUMP | psql -q -w -h $DB_HOST -p $DB_PORT -U $DB_USER -d $DB_NAME &>/dev/null;
                echo "Restored from dump file $LATEST_DUMP"
                echo "OK"
        fi
        echo "Done"
}

jms_proc_counter () {
	JMS_PROCS="$(ps aux | grep 'app/console' | grep -v grep | wc -l)"
}

ctrl_cleanup () {
	echo " got interrupted, disabling maintenance..."
	touch /tmp/oro-jobs.lock;
	maintenance_off;
}

graceful_wait () {
	trap ctrl_cleanup INT
	jms_proc_counter;
	while [ "$JMS_PROCS" -gt "0" ]; do
		echo "Waiting for JMS jobs completion or stopping to proceed, please turn off Job Queue."
		echo "(Press CTL+C if you want to abort)"
		echo ""
		sleep 11;
		jms_proc_counter;
	done 
}

code_backup () {
        echo "Running OroCRM code backup..."
        tar -czf $CODE_BACKUP_DIR/orocrm-$(date +"%F").tar.gz -C $WEB_ROOT $ORO_NAME/;
        echo "OK"
	echo $CODE_BACKUP_DIR/orocrm-$(date +"%F").tar.gz
        echo "Done" 
}

code_restore () {
        echo "Clean up OroCRM web root..."
	shopt -s extglob
	cd $WEB_ROOT/$ORO_NAME; rm -fr !web
	cd $WEB_ROOT/$ORO_NAME/web; rm -fr '!^maintenance\.(html|lock)';
	cd $WEB_ROOT/
        cp $LATEST_CODE $WEB_ROOT/
	echo "Restoring OroCRM code from backup..."
        tar -xzf orocrm-*.tar.gz;
        rm -f orocrm-*.tar.gz;
	cd $WEB_ROOT/$ORO_NAME;
        echo "Restored from archive file $LATEST_CODE"
        echo "OK"
        echo "Done"
}

crond_stop () {
	crontab -l | sed 's/^*/#*/g' | crontab -
	echo "Cron tasks disabled."
}

crond_start () {
	crontab -l | sed 's/^#\*/\*/g' | crontab -	
	echo "Cron tasks enabled."
}

# EOF #
